print(1)
library(tidyr)
library(Rcpp)
# Paquetes
install.packages("Rcpp")
# Paquetes
install.packages("Rcpp")
library(Rcpp)
library(tidyr)
# Paquetes
install.packages("Rcpp")
# Paquetes
install.packages("Rcpp")
library(FNN)
library(scales)
library(caret)
# Escalar los valores
points$driverId.s = rescale(points$driverId)
points$constructorId.s = rescale(points$constructorId)
points$grid.s = rescale(points$grid)
points$position.s = rescale(points$position)
points$laps.s = rescale(points$laps)
points$milliseconds.s = rescale(points$milliseconds)
points$rank.s = rescale(points$rank)
setwd("Developer/Tecnologies/R/f1/")
points = read.csv("data/points.csv")
View(points)
points = read.csv("data/cleanPoints.csv")
View(points)
row.names(points) = points$X
points$X = NULL
# Escalar los valores
points$driverId.s = rescale(points$driverId)
points$constructorId.s = rescale(points$constructorId)
points$grid.s = rescale(points$grid)
points$position.s = rescale(points$position)
points$laps.s = rescale(points$laps)
points$milliseconds.s = rescale(points$milliseconds)
points$rank.s = rescale(points$rank)
#Particionamos
t.id = createDataPartition(points$position, p = 0.6, list = F)
tr = points[t.id,]
#Validar
temp = points[-t.id,]
v.id = createDataPartition(temp$position, p = 0.5, list = F)
val = temp[v.id,]
test = temp[-v.id,]
#Creamos el modelo
reg1 = knn.reg(tr[,9:15], val[,9:15], tr$position, k = 1, algorithm = "brute")
rmse1 = sqrt(mean((reg1$pred-val$position)^2))
print(rmse1)
reg2 = knn.reg(tr[,9:15], val[,9:15], tr$position, k = 2, algorithm = "brute")
rmse2 = sqrt(mean((reg2$pred-val$position)^2))
print(rmse2)
df2 = data.frame(actual = val$position, pred = reg2$pred)
plot(df2)
abline(0,1)
reg3 = knn.reg(tr[,9:15], val[,9:15], tr$position, k = 3, algorithm = "brute")
rmse3 = sqrt(mean((reg3$pred-val$position)^2))
print(rmse3)
reg4 = knn.reg(tr[,9:15], val[,9:15], tr$position, k = 4, algorithm = "brute")
rmse4 = sqrt(mean((reg4$pred-val$position)^2))
print(rmse4)
errors = c(rmse1, rmse2, rmse3, rmse4)
plot(errors, type = "o", xlab = "k", ylab = "RMSE")
#Creamos la regresi贸n
reg.test = knn.reg(tr[,9:15], test[,9:15], tr$position, k = 2, algorithm = "brute")
rmse.test = sqrt(mean((reg.test$pred-test$position)^2))
print(rmse.test)
df = data.frame(actual = test$position, pred = reg.test$pred)
plot(df)
abline(0,1)
#Validaci贸n cruzada
t.id = createDataPartition(points$position, p = 0.7, list = F)
tr = points[t.id,]
val = points[-t.id,]
reg = knn.reg(tr[,9:15], test = NULL, y = tr$position, k = 2, algorithm = "brute")
rmse = sqrt(mean(reg$residuals^2))
print(rmse)
#Funci贸n para hacer la regresi贸n
rdacb.knn.reg = function(trP, valP, trT, valT, k){
library(FNN)
res = knn.reg(trP, valP, trT, k, algorithm = "brute")
rmserror = sqrt(mean((valT-res$pred)^2))
cat(paste("RMSE para k =", toString(k), ":", rmserror, "\n", sep = " "))
return(rmserror)
}
rdacb.knn.reg(tr[,9:15], val[,9:15], tr$position, val$position, 3)
rdacb.knn.reg.multi = function(trP, valP, trT, valT, startK, endK){
rmserros = vector()
for (k in startK:endK) {
rmserror = rdacb.knn.reg(trP, valP, trT, valT, k)
rmserros = c(rmserros, rmserror)
}
plot(rmserros, type = "o", xlab = "k", ylab = "RMSE")
}
rdacb.knn.reg.multi(tr[,9:15], val[,9:15], tr$position, val$position, 1, 13)
abline(0,1)
plot(df)
abline(0,1)
